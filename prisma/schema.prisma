// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Student {
  id             String @id @default(nanoid())
  name           String
  rollNumber     String
  classId        String
  academicYearId String

  class        Class        @relation(fields: [classId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  grades       Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id             String @id @default(nanoid())
  className      String @unique
  academicYearId String

  academicYear  AcademicYear   @relation(fields: [academicYearId], references: [id])
  students      Student[]
  classSubjects ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id   String @id @default(nanoid())
  year String @unique

  classes       Class[]
  students      Student[]
  classSubjects ClassSubject[]
  gpaSettings   GPASetting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id   String @id @default(nanoid())
  code String
  name String

  classSubjects ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSubject {
  id                  String @id @default(nanoid())
  classId             String
  subjectId           String
  academicYearId      String
  gpaPercentageExam   Float // e.g., 60.0
  gpaPercentageAssign Float // e.g., 40.0

  class        Class        @relation(fields: [classId], references: [id])
  subject      Subject      @relation(fields: [subjectId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  grades       Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id              String @id @default(nanoid())
  studentId       String
  classSubjectId  String
  examScore       Float
  assignmentScore Float
  totalScore      Float
  gradeLetter     String
  gpa             Float

  student      Student      @relation(fields: [studentId], references: [id])
  classSubject ClassSubject @relation(fields: [classSubjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GPASetting {
  id                 String  @id @default(nanoid())
  academicYearId     String
  description        String
  calculationFormula String? // Optional custom logic, e.g., "exam * 0.6 + assignment * 0.4"

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(nanoid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
