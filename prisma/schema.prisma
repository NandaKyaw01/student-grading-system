// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model AcademicYear {
  id        Int     @id @default(autoincrement())
  yearRange String  @unique // "2024-2025"
  isCurrent Boolean @default(false)

  semesters Semester[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Semester {
  id             Int     @id @default(autoincrement())
  semesterName   String // "1st Semester"
  academicYearId Int
  isCurrent      Boolean @default(false)

  classes     Class[]
  enrollments Enrollment[]
  grades      Grade[]
  results     Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
}

enum Code {
  CS
  CT
  CST
}

model Class {
  id             Int    @id @default(autoincrement())
  className      String // "First Year CS"
  departmentCode Code
  semesterId     Int

  enrollments Enrollment[]
  subjects    ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semester Semester @relation(fields: [semesterId], references: [id])
}

model Subject {
  id           String @id // "M-101"
  subjectName  String // "Mathematics"
  creditHours  Float  @default(3.0)
  examWeight   Float  @default(0.6)
  assignWeight Float  @default(0.4)

  grades  Grade[]
  classes ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSubject {
  classId   Int
  subjectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@id([classId, subjectId])
  @@unique([classId, subjectId])
}

model Student {
  id          Int    @id @default(autoincrement())
  studentName String

  enrollments Enrollment[]
  grades      Grade[]
  results     Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id         Int     @id @default(autoincrement())
  rollNumber String
  studentId  Int
  classId    Int
  semesterId Int
  isActive   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student  Student  @relation(fields: [studentId], references: [id])
  class    Class    @relation(fields: [classId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [id])

  @@unique([studentId, semesterId, rollNumber])
}

model Grade {
  id         Int    @id @default(autoincrement())
  studentId  Int
  subjectId  String
  semesterId Int
  examMark   Float
  assignMark Float
  finalMark  Float // Calculated: (examMark*examWeight + assignMark*assignWeight)
  grade      String // Lookup from GradeScale
  score      Float
  gp         Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student  Student  @relation(fields: [studentId], references: [id])
  subject  Subject  @relation(fields: [subjectId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [id])
}

model GradeScale {
  id      Int    @id @default(autoincrement())
  minMark Int
  maxMark Int
  grade   String
  score   Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([minMark, grade])
  @@unique([grade, score])
}

model Result {
  id           Int   @id @default(autoincrement())
  studentId    Int
  semesterId   Int
  gpa          Float
  totalCredits Float
  rank         Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student  Student  @relation(fields: [studentId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [id])

  @@unique([studentId, semesterId])
}

model User {
  id             String    @id @default(nanoid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
