// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model AcademicYear {
  id                  Int                  @id @default(autoincrement())
  yearRange           String               @unique
  isCurrent           Boolean              @default(false)
  semesters           Semester[]
  academicYearResults AcademicYearResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isCurrent])
}

model Semester {
  id             Int          @id @default(autoincrement())
  semesterName   String
  academicYearId Int
  isCurrent      Boolean      @default(false)
  classes        Class[]
  enrollments    Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  @@index([academicYearId])
  @@index([isCurrent])
}

model Class {
  id             Int            @id @default(autoincrement())
  className      String
  departmentCode String
  semesterId     Int
  enrollments    Enrollment[]
  subjects       ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semester Semester @relation(fields: [semesterId], references: [id])

  @@index([semesterId])
  @@index([departmentCode])
}

model Subject {
  id           String         @id
  subjectName  String
  creditHours  Float          @default(3.0)
  examWeight   Float          @default(0.6)
  assignWeight Float          @default(0.4)
  priority     Int?           @default(0)
  classes      ClassSubject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subjectName])
}

model ClassSubject {
  id        Int      @id @default(autoincrement())
  classId   Int
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  grades    Grade[]

  class   Class   @relation(fields: [classId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([classId, subjectId])
}

model Student {
  id                  Int                  @id @default(autoincrement())
  studentName         String
  admissionId         String               @unique
  enrollments         Enrollment[]
  academicYearResults AcademicYearResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentName])
  @@index([admissionId])
}

model Enrollment {
  id         Int     @id @default(autoincrement())
  rollNumber String
  studentId  Int
  classId    Int
  semesterId Int
  isActive   Boolean @default(false)
  result     Result?
  grades     Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student  Student  @relation(fields: [studentId], references: [id])
  class    Class    @relation(fields: [classId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [id])

  @@unique([classId, semesterId, studentId])
  @@index([studentId])
  @@index([classId])
  @@index([semesterId])
  @@index([isActive])
}

model Grade {
  id             Int    @id @default(autoincrement())
  enrollmentId   Int
  classSubjectId Int
  baseMark       Float
  examMark       Float
  assignMark     Float
  finalMark      Float
  grade          String
  score          Float
  gp             Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  classSubject ClassSubject @relation(fields: [classSubjectId], references: [id])

  @@unique([enrollmentId, classSubjectId])
  @@index([grade])
}

model GradeScale {
  id      Int    @id @default(autoincrement())
  minMark Int
  maxMark Int
  grade   String
  score   Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([minMark, grade])
  @@unique([grade, score])
  @@index([grade])
}

model Result {
  enrollmentId Int    @id // Using enrollmentId as primary key
  gpa          Float
  totalCredits Float
  totalGp      Float
  status       Status @default(FAIL)

  academicYearResultId Int?

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  enrollment         Enrollment          @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  AcademicYearResult AcademicYearResult? @relation(fields: [academicYearResultId], references: [id])

  @@index([gpa])
  @@index([academicYearResultId])
}

enum Status {
  INCOMPLETE
  PASS
  FAIL
}

model AcademicYearResult {
  id             Int @id @default(autoincrement())
  studentId      Int
  academicYearId Int

  // Calculated fields
  overallGpa   Float @default(0.0)
  totalCredits Float @default(0.0)
  totalGp      Float @default(0.0)

  // Semester tracking
  semesterCount Int     @default(0)
  isComplete    Boolean @default(false) // true when has both semesters

  // Status and ranking
  status   Status @default(INCOMPLETE) // INCOMPLETE, PASS, FAIL
  yearRank Int?

  semesterResults Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student      Student      @relation(fields: [studentId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  @@unique([studentId, academicYearId])
  @@index([overallGpa])
  @@index([isComplete])
  @@index([status])
  @@index([yearRank])
}

model User {
  id             String    @id @default(nanoid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
